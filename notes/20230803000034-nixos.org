:PROPERTIES:
:ID:       3750306f-bf6a-4da2-8735-e4a46e58cdf7
:DIR:      ../.attach/nixos
:END:
#+title: nixos

#+filetags: it nixos
#+hugo_auto_set_lastmod: t
#+hugo_publishdate: 2023-08-03
#+options: tags:nil

Notes about NixOS. I'm in too deep... ðŸ˜±

#+hugo: more

* flakes
get template, see available here https://github.com/NixOS/templates/
: nix flake new FOLDER --template templates#python

nix build using defaultPackage, nix develop using devShell, or nix run using defaultApp

aliasing =+= to =nix-shell -p=, then we can do (and garbage collect will take care of it later)
: cat images.json | + jq | + convert

Comma runs software without installing it. Basically it just wraps together nix shell -c and nix-index. You stick a , in front of a command to run it from whatever location it happens to occupy in nixpkgs without really thinking about it.
https://github.com/nix-community/comma


Install
: nix-env -iA nixos.tdesktop

remove all
: nix-env -e
** FHS
#+begin_src nix
# flake.nix
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
  };

  outputs = { self, nixpkgs }:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
      fhs = pkgs.buildFHSUserEnv {
        name = "fhs-shell";
        targetPkgs = pkgs: [pkgs.gcc pkgs.libtool pkgs.nodejs-18_x] ;
      };
    in
      {
        devShells.${system}.default = fhs.env;
      };
}
#+end_src
Now I can access this environment through nix develop. The only thing to be aware is that the derivation that buildFHSUserEnv makes is exposed through the .env attribute and that is what needs to be exported as a dev shell.

You can read more about buildFHSUserEnv [[https://ryantm.github.io/nixpkgs/builders/special/fhs-environments/][here]] and a note about [[https://discourse.nixos.org/t/flakes-way-of-creating-a-fhs-environment/20821/5][how to use program.]]
* using flakes to build

nix shell is meant to spawn a shell with an application in scope - that's why it modifies only the PATH envvar (think: if you want to ad hoc launch some app, but don't want to actually install it).

nix develop is meant to spawn a shell with an application's development dependencies in scope (think: if you want to hack on an application locally, compile it etc.).

That's why for bringing libraries to scope, you should create a flake that uses mkShell and then run nix develop; nix shell doesn't work with libraries by design.

=nix run= is for running applications defined in flakes. But flakes allow you to run arbitrary applications, not just binaries from a given derivation.

I think =nix-shell -p pkg --run "some command"= is closer to =nix shell nixpkgs#pkg --command "some command"=.

See the comparison table at the end of this blog post
https://blog.ysndr.de/posts/guides/2021-12-01-nix-shells/
https://blog.ysndr.de/posts/internals/2021-01-01-flake-ification/
** example 1
https://gitlab.com/gridbugs/ia

nix run gitlab:gridbugs/ia
nix flake show gitlab:gridbugs/ia

Q: How do I tell nix to re-download an app located in a git repo?
A: It will re-download it by itself rather soon, but if you want to force it try (admittedly counter-intuitively) =nix flake lock gitlab:gridbugs/ia= , or do =nix run --refresh gitlab:gridbugs/ia=

** Entering the byuild env of a flake
https://nixos-and-flakes.thiscute.world/development/intro#enter-the-build-environment-of-any-nix-package

#+begin_src sh
nix develop nixpkgs#ptouch-print
unpackPhase
---edit code
#+end_src

#+begin_quote
he default execution order of all build phases of a Nix package is:

$prePhases unpackPhase patchPhase $preConfigurePhases configurePhase $preBuildPhases buildPhase checkPhase $preInstallPhases installPhase fixupPhase installCheckPhase $preDistPhases distPhase $postPhases
#+end_quote
* containers
** nspawn
https://discourse.nixos.org/t/system-with-nixos-how-to-add-another-extra-distribution/5767/8
https://www.reddit.com/r/NixOS/comments/t5v83i/comment/hz7gl96/?utm_source=share&utm_medium=web2x&context=3

: nix-shell -p xorg.xhost
#+begin_src sh
cat escape.sh

#!/usr/bin/env bash
xhost +local:

systemd-nspawn -b \
  -D /home/paw/container/debian1\
  -M debian \
  --bind=/home/paw \
  --bind-ro=/tmp/.X11-unix \
  --bind=/dev/snd \
  --bind=/dev/dri \
  --bind=/dev/shm \
  --bind=/run/user/1000/pulse:/run/user/host/pulse
#+end_src

#+title: Readme


Use [[https://www.reddit.com/r/NixOS/comments/n6g3j4/buildpythonpackage_dependency_problems_how_to/][overlay]] to pin a python package to a specific version

Customizing packages in Nix
https://bobvanderlinden.me/customizing-packages-in-nix/


Building packages and applications
https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/python.section.md#building-packages-and-applications-building-packages-and-applications

* building
https://elatov.github.io/2022/01/building-a-nix-package/

: nix-build -K -E 'with import <nixpkgs> {}; (python39.pkgs.callPackage ./default.nix) {}'


See runtime dependencies (closure) by giving a path in /nix/store/...
nix-store -qR  `which man`
OR
nix-store -q --tree  `which man`
OR only build build dependencies listed once (--reference: immediate dependencies)
nix-store -q --references `which man`

See build time dependencies
nix-store -qR $(nix-store -qd `which man`)

See content of drv-file (how to build the derivation). Can use path of either .drv file or output of derivation
nix show-derivation /nix/store/l9mbk8pcw242r3s8118qaz16mxah2zd2-python3.9-pydstool-0.91.0_dev | bat

* profiles
See this https://www.reddit.com/r/NixOS/comments/bi3gz3/what_is_the_difference_between_nix_profiles_and

Installing into a profile (creates a new generation)

: nix profile install nixpkgs#bsdgames
: nix-env -iA nixos.bsdgames

See current profile( See packages install into profile)
: nix profile list
OR
: nix-env -q


See generations
: nix-env --list-generations

Compare versions from local flake with github:nixpkgs
#+begin_src sh
nix eval nixpkgs#prusa-slicer.meta | nixfmt | grep name
nix eval github:nixos/nixpkgs#prusa-slicer.meta.name

nix profile install --priority 4 github:nixos/nixpkgs#prusa-slicer
#+end_src

OR
#+begin_src sh
diff -u \
  <(nix eval --json nixpkgs#rtl-sdr.meta | jq) \
  <(nix eval --json github:NixOS/nixpkgs#rtl-sdr.meta | jq)
#+end_src


=<()= only works in bash/zsh. In fish, run it in bash
#+begin_src sh
bash -c 'diff -u <(nix eval --json nixpkgs#rtl-sdr.meta | jq) <(nix eval --json github:NixOS/nixpkgs#rtl-sdr.meta | jq)'
#+end_src

Get the store path and files a package provide
#+begin_src sh
nix eval --raw nixpkgs#rtl-sdr.outPath
tree $(nix eval --raw nixpkgs#rtl-sdr.outPath)
#+end_src

Same for a binary
#+begin_src sh
# path to bin
readlink -f $(which rtl_sdr)
# path to package
nix-store --query --deriver $(readlink -f $(which rtl_sdr))
#+end_src

** Install a specific git revision
If the latest nixpkgs fails to install/build, a previous working commit can be used.

Find the status on https://hydra.nixos.org, example [[https://hydra.nixos.org/build/300278825][Build 300278825 of job nixpkgs:trunk:openscad-unstable.x86_64-linux]]. This build failed, latest successful build is [[https://hydra.nixos.org/build/300223842][300223842]]. Press the =Inputs= tab to get the git revision =1bfcb1539b8f0ac52b06a33ed0630d5077a4f998=

or get the status on the cli
#+begin_src sh
hydra-check openscad-unstable
#+end_src

#+begin_src sh
nix profile install github:nixos/nixpkgs/1bfcb1539b8f0ac52b06a33ed0630d5077a4f998#openscad-unstable
#+end_src

** garbage collecting

Lets install and uninstall a package
: nix-env -iA nixos.bsdgames
: nix-env -e bsdgames

Now garbage collect will not delete derivations in =/nix/store/= that are still referenced by generations (that is the case with ~bsdgames~. The previous generation points to ~bsdgames~)
: nix-garbage-collect

See which generations points to path in =/nix/store=
: nix-store --query --roots /nix/store/zn61n12a346yxydww9l0iv5v78ly75mp-bsd-games-2.17
: /nix/var/nix/profiles/per-user/paw/profile-11-link -> /nix/store/njfqw117gnmm5b1mwdl3gii63w2p99jq-user-environment
: /nix/var/nix/profiles/per-user/paw/profile-8-link -> /nix/store/4ldc2ck0h8aizm24m8r359y7pr4wkfsg-user-environment

ie. delete profile-8 and profile-11 and rerun gc will remove =bsdgames= and unused dependencies from =/nix/store=


Building with nix-build or flakes creates an indirect root by symlinking =./result= to
: ls -l /nix/var/nix/gcroots/auto/

How do we remove the derivation then? There are two possibilities:
- Remove the indirect GC root from /nix/var/nix/gcroots/auto.
- Remove the result symlink.

In the first case, the derivation will be deleted from the nix store, and result becomes a dangling symlink. In the second case, the derivation is removed as well as the indirect root in /nix/var/nix/gcroots/auto.

Use this to find stray gcroots hidden in unexpected places (from building envs from shell.nix files, for example).
: sudo -i nix-store --gc --print-roots | egrep -v '^(/nix/var|/run/current-system|/run/booted-system|/proc|{memory|{censored)'

* misc useful commands
Get =<nixpkgs>= commit-id for specific version of a program.
https://lazamar.co.uk/nix-versions/

Quick primer on [[https://elatov.github.io/2022/01/building-a-nix-package/#contributing-to-nixpkgs][contributing to nixpkgs]]

#+begin_src sh

nix search nixpkgs#python3Packages poetry
nix-build -E 'with import <nixpkgs> {}; callPackage ./default.nix {}'
#+end_src

Find which packages provides a library, etc: Install =nix-index= and
: nix-locate -1 -w libgssapi_krb5.so.2  | grep -v \(

Get meta data for package (incl. version)
: nix eval nixpkgs#prusa-slicer.meta

* examples
[[https://git.kirinsst.xyz/kir/nixos-configs][server-config]]
[[https://gitea.tlater.net/tlaternet/tlaternet-server][another good server config]]
* Fix package

** shallow clone of nixpkgs
https://discourse.nixos.org/t/nix-monorepo-size-and-contribution/5565

** Closed PRs
[[https://github.com/NixOS/nixpkgs/pull/293007][openscad: add wrapGAppsHook]]
[[https://github.com/NixOS/nixpkgs/pull/357400][urh: add wrapGAppsHook3]]

** gsettings

See [[https://discourse.nixos.org/t/gtk-file-dialog-causes-segfaults-glib-gio-error-settings-schema-org-gtk-settings-filechooser-does-not-contain-a-key-named-show-type-column/6853/6][nixos discourse]] for a temporary solution, show below
#+begin_src sh
mkdir -p ~/.local/share/glib-2.0/schemas
cp -pi /nix/store/...-gtk+3-3.<LATEST>/share/gsettings-schemas/gtk+3-3.*/glib-2.0/schemas/gschemas.compiled ~/.local/share/glib-2.0/schemas/

cp -pi /nix/store/3xs715zn5mm3isblz1qxa78zwnlhhjgx-gtk+3-3.24.43/share/gsettings-schemas/gtk+3-3.24.43/glib-2.0/schemas/gschemas.compiled ~/.local/share/glib-2.0/schemas/

#+end_src

The better solution is to add wrapGApps hook, see also the link above.


*** OLD STUFF
https://nixos.org/manual/nixpkgs/stable/#ssec-gnome-icons
https://discourse.nixos.org/t/org-gtk-settings-filechooser-is-not-installed-when-running-i3/24373/5



nix-locate org.gtk.Settings.FileChooser.gschema.xml

https://search.nixos.org/packages?channel=23.11&from=0&size=50&sort=relevance&type=packages&query=gtk3
https://github.com/NixOS/nixpkgs/blob/nixos-23.11/pkgs/development/libraries/gtk/3.x.nix#L245


GLib-GIO-ERROR **: No GSettings schemas are installed on the system
(openscad:26805): GLib-GIO-ERROR **: 13:10:37.913: Settings schema 'org.gtk.Settings.FileChooser' is not installed

veracrypt: add wrapGAppsHook
https://github.com/NixOS/nixpkgs/pull/221768/files


advanced example
https://github.com/NixOS/nixpkgs/pull/190960/files
** desktop file
When packages are included in environment.systemPackages, a nixos module for creating the system will look for <pkg>/share/applications/*.desktop paths, and add them to =/run/current-system/sw/share/applications= directory. Specifically: https://github.com/NixOS/nixpkgs/blob/7b2f9d4732d36d305d515f20c5caf7fe1961df80/nixos/modules/config/xdg/menus.nix

IE,
#+begin_src sh
ls -l /run/current-system/sw/share/applications

# and (the user-specific programs)
ls -l /etc/profiles/per-user/paw/share/applications/
#+end_src

Use =pkgs.makeDesktopItem=. Examples from [[https://github.com/search?q=repo%3ANixOS%2Fnixpkgs+makeDesktopItem&type=code][nixpkgs repo]].
Then either install the desktop file manually,
#+begin_src nix
{makeDesktopItem}:

stdenv.mkDerivation {
  # snip
  desktopItem = makeDesktopItem {
    name = "urh";
    exec = "urh";
    icon = "urh";
    desktopName = "Universal Radio Hacker";
    comment = meta.description;
    categories = [ "HamRadio" ];
  };
  postInstall=''
  mkdir -p $out/share/
  cp --recursive ${desktopItem}/share/applications $out/share/
'';
  # snip
}
#+end_src

OR use =pkgs.copyDesktopItems= with =desktopItems= from =mkDerivation=
#+begin_src nix
{makeDesktopItem, copyDesktopItems}:

stdenv.mkDerivation {
  # snip
  nativeBuildInputs = [ copyDesktopItems ];
  desktopItems = [
    (makeDesktopItem {
      name = "urh";
      exec = "urh";
      icon = "urh";
      desktopName = "Universal Radio Hacker";
      comment = meta.description;
      categories = [ "HamRadio" ];
    })
  ];
  # snip
}
#+end_src

NOTE:
use Exec=urh in the desktop file rather than an absolute path, so that the user can provide their own wrapper a round programs on their path if they want to.

*** icons

Convert .ico files to png
#+begin_src nix
{ iconConvTools}:
let
  src = fetchFromGitHub {};
in
stdenv.mkDerivation  {
  inherit src;

  postInstall = ''
    icoFileToHiColorTheme $src/path/to/icon.ico appname $out
  '';
}
#+end_src

Or use =convert= to get the right size
#+begin_src nix
{imagemagick}:

stdenv.mkDerivation {
  nativeBuildInputs = [ imagemagick # to make icons
                      ];

  #install -Dm644 $src/data/icons/appicon.png $out/share/icons/hicolor/48x48/urh.png
  postInstall = ''
      mkdir -p $out/share/icons/hicolor/{48x48,128x128}/apps
      convert $src/data/icons/appicon.png -resize 48x48 $out/share/icons/hicolor/48x48/apps/urh.png
      convert $src/data/icons/appicon.png -resize 128x128 $out/share/icons/hicolor/128x128/apps/urh.png
    '';
}
#+end_src
* dev-shells
Follow templates from here
https://github.com/the-nix-way/dev-templates/tree/main?tab=readme-ov-file#available-templates

A new thing for setting up DBs, VMs,
https://devenv.sh/
* get sha256

[[https://github.com/NixOS/nixpkgs/issues/191128#issuecomment-2159553013][From this link]]
Three ways
#+begin_src sh
nix shell nixpkgs#nix-prefetch
nix-prefetch fetchFromGitHub --owner owner --repo repo --rev 65bb66d364e0d10d00bd848a3d35e2755654655b
The fetcher will be called as follows:
> fetchFromGitHub {
>   owner = "owner";
>   repo = "repo";
>   rev = "65bb66d364e0d10d00bd848a3d35e2755654655b";
>   sha256 = "sha256:0000000000000000000000000000000000000000000000000000";
> }

sha256-8EUDsWeTeZwJNrtjEsUNLMt9I9mjabPRBZG83u7xtPw=
#+end_src

OR

#+begin_src sh
nix-shell -p nix-prefetch-git jq --run "nix hash to-sri sha256:\$(nix-prefetch-git --url https://github.com/cli/cli --quiet --rev v2.49.2 | jq -r '.sha256')"
#+end_src


It seems that the =hash= output of the following is the sha256 to use.
#+begin_src sh
nix-shell -p nix-prefetch-git --run "nix-prefetch-git --url https://github.com/jopohl/urh --quiet --rev v2.9.8"
#+end_src
* python :python:
** matplotlib
*** qt.qpa.plugin: Could not find the Qt platform plugin "xcb"
Also see [[https://discourse.nixos.org/t/error-when-trying-to-use-pyqt5-backend-of-matplotlib/46065/2?u=pawsen][wrapping python, set xcb variables directly]]
#+begin_src sh
devShells.default = pkgs.mkShell {
    buildInputs = (with pkgs; [
    pkgs.python3.withPackages (ps: with ps; [
        numpy
        scipy
        ipython
        matplotlib
    ]);

    # fix for matplotlib: qt.qpa.plugin: Could not find the Qt platform plugin "xcb"
    pkgs.qt5.qtbase
    ]);

    # Environment variables
    shellHook = ''
    # fix for matplotlib: qt.qpa.plugin: Could not find the Qt platform plugin "xcb"
    export QT_QPA_PLATFORM_PLUGIN_PATH="${pkgs.qt5.qtbase}/lib/qt-${pkgs.qt5.qtbase.version}/plugins/platforms"
    '';
};
#+end_src
