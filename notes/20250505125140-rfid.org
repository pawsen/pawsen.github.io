:PROPERTIES:
:ID:       e4172e2e-38e4-4d89-ba7e-b33391c66c68
:END:
#+title: rfid

#+filetags: it hacking proxmark rfid
#+hugo_categories: it
#+hugo_auto_set_lastmod: t
#+hugo_publishdate: 2025-05-05

Reading and writing RFID.

#+hugo: more

This is specifically about Radio-Frequency Identification, what we normally do when beeping in for work/fitness/skiing, etc.

| Band      | Frequency Range | Common Uses                       |
|-----------+-----------------+-----------------------------------|
| LF        | 125–134 kHz     | Animal tags, access cards         |
| HF        | 13.56 MHz       | NFC, smart cards                  |
| UHF       | 860–960 MHz     | Logistics, asset tracking         |
| Microwave | 2.45 GHz+       | Toll collection, some active tags |


- See the notes on [[id:040e6d1b-0d69-445c-bffd-399694cdb58d][wiegand]] for communications between the reader and controller.
- See [[id:e6150032-6c7e-402b-9c7e-ebfbb42aa0f8][Car immobilizer]] for my attempt to start my car without a key
- See [[id:9a61aa06-a5cb-414d-9e32-b837c2d9227b][sdr radio]] for listening to- and recording radio transmitted data

* Chips
There are a number of NFC chips with =NXP PN532= the most commonly used. It can only read/write =ISO 14443= and cannot emulate UID (the first byte of the UID is hardcoded to =0x08=, thus trying to set =0x11223344= will result in =0x08223344=).

If we only want to read/write e.g. Mifare Classic =PN532= is a good choice due to the available libraries for Arduino/Rasperry/libNFC


| Feature                          | NXP PN5180                                         | TI TRF7970A                                            | NXP PN532                                         |
|----------------------------------+----------------------------------------------------+--------------------------------------------------------+---------------------------------------------------|
| Manufacturer                     | NXP Semiconductors                                 | Texas Instruments                                      | NXP Semiconductors                                |
| NFC Standards Supported          | ISO/IEC 14443 A/B, ISO/IEC 15693, FeliCa           | ISO/IEC 14443 A/B, ISO/IEC 15693                       | ISO/IEC 14443 A/B, FeliCa, MIFARE                 |
| Operating Frequency              | 13.56 MHz                                          | 13.56 MHz                                              | 13.56 MHz                                         |
| Tag Reader Support               | Full support for all common NFC tags               | Full support for all common NFC tags                   | Supported, but less robust at higher speeds       |
| Tag Emulation                    | Partial; supports ISO 14443-4 Type A (UID fixed)   | Partial; supports some emulation (limited UID control) | Limited; mostly ISO 14443A, fixed UID             |
| UID Customization                | Not supported; UID is fixed in hardware            | Partially possible through undocumented methods        | Not supported                                     |
| Peer-to-Peer Mode                | Supported                                          | Supported                                              | Supported                                         |
| Host Interface                   | SPI (5 Mbps), available reference drivers          | SPI, UART                                              | SPI, I²C, High-Speed UART                         |
| Software Availability            | NXP NFC Reader Library (C), examples available     | TI TRF7970A stack and code examples                    | Wide support: libnfc, Adafruit libraries, Arduino |
| Open Source Support              | Limited (NXP C libraries, some driver ports exist) | Moderate (TI examples and technical docs)              | Strong open-source support across platforms       |
| Ease of Use                      | Moderate; low-level configuration via registers    | Moderate; requires TI examples or firmware dev         | High; widely used in hobbyist platforms           |
| Power Consumption                | ~100 mA active                                     | ~100 mA active                                         | ~80–100 mA active                                 |
| Development Boards               | Elektor PN5180 Breakout, Mikroe NFC 3 Click        | DLP-7970ABP BoosterPack (TI)                           | PN532 V3 NFC Module, Seeed, Adafruit, Elechouse   |
| UID Cloning / Replay Feasibility | Not possible (UID locked down)                     | Possible only in specific cases (ISO 15693)            | Not feasible; UID locked in hardware              |

[[https://github.com/ATrappmann/PN5180-Library][PN5189 Arduino librabry]]

For full emulation a Proxmark3 Easy seems to be the best solution.

* Reverse engineering
See [[id:cdfbb224-e8d9-4f8f-8272-a0b88fb8e82d][hacks/rfid]]

* 13.56 MHz
** Mifare Classic :ATTACH:

#+CAPTION: Mifare Classic 1k memory layout
[[attachment:mifare_classic_mem_layout.png]]
